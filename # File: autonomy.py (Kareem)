# File: autonomy.py
import time, logging, math
from camera import Detection
from adafruit_servokit import ServoKit
from barometer import set_ground, get_height

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("autonomy")

class RobotState:
    def __init__(self):
        self.altitude_readings = []
        self.ground = set_ground()
        self.current_stop = 10
        self.cg_target = 10
        self.tracking = False
        self.mode = "manual"  # or "ball", "goal"
        # Track last timestamp for each action
        self.last_times = {
            "wing": 0,
            "back": 0,
            "left": 0,
            "right": 0,
            "cg":   0,
            "alt":  0
        }

class Autonomy:
    def __init__(self):
        self.state = RobotState()
        self.camera = Detection(stream=False, testing=False)
        self.kit = ServoKit(channels=16)
        # Configure continuous servo 6 for CG-rail
        self.kit.continuous_servo[6].set_pulse_width_range(1000,2300)

    def millis(self):
        return int(time.time() * 1000)

    def oscillate(self, direction, freq):
        angle = 90 + direction * 80 * math.sin(2 * math.pi * freq * time.time())
        return max(0, min(180, angle))

    def move_cg(self):
        now = self.millis()
        if now - self.state.last_times["cg"] < 150:
            return False
        self.state.last_times["cg"] = now

        curr = self.state.current_stop
        tgt  = self.state.cg_target
        if curr == tgt:
            self.kit.continuous_servo[6].throttle = 0
            return True

        direction = 1 if tgt > curr else -1
        self.kit.continuous_servo[6].throttle = direction * 0.2
        self.state.current_stop += direction
        return False

    def update_altitude(self):
        now = self.millis()
        if now - self.state.last_times["alt"] < 3000:
            return
        self.state.last_times["alt"] = now
        h = get_height(self.state.ground)
        readings = self.state.altitude_readings
        readings.append(h)
        if len(readings) > 5:
            readings.pop(0)
        self.state.alt = sum(readings) / len(readings)

    def manual_control(self, inputs):
        now = self.millis()

        # 1) Forward flap (D-pad Up)
        if inputs["dpad_up"] and now - self.state.last_times["wing"] > 80:
            self.state.last_times["wing"] = now
            fwd = self.oscillate(direction=1, freq=0.8)
            self.kit.servo[1].angle = fwd            # right wing
            self.kit.servo[0].angle = 180 - fwd      # left wing
            self.kit.servo[8].angle = 80             # center back-fin

        # 2) Back flap (D-pad Down)
        if inputs["dpad_down"] and now - self.state.last_times["back"] > 80:
            self.state.last_times["back"] = now
            back = self.oscillate(direction=1, freq=0.9)
            self.kit.servo[8].angle = back           # back-fin
            # hold wings level
            self.kit.servo[1].angle = 180
            self.kit.servo[0].angle = 0

        # 3) Turn left (D-pad Left)
        if inputs["dpad_left"] and now - self.state.last_times["left"] > 80:
            self.state.last_times["left"] = now
            ang = self.oscillate(direction=1, freq=0.9)
            self.kit.servo[0].angle = ang            # left wing
            self.kit.servo[1].angle = 180 - ang      # right wing
            self.kit.servo[8].angle = 165            # tilt back-fin

        # 4) Turn right (D-pad Right)
        if inputs["dpad_right"] and now - self.state.last_times["right"] > 80:
            self.state.last_times["right"] = now
            ang = self.oscillate(direction=1, freq=0.9)
            self.kit.servo[1].angle = ang            # right wing
            self.kit.servo[0].angle = 180 - ang      # left wing
            self.kit.servo[8].angle = 5              # tilt back-fin

        # 5) CG-rail trim
        if inputs["cg_forward"]:
            self.state.cg_target = max(1, self.state.cg_target - 1)
        if inputs["cg_backward"]:
            self.state.cg_target = min(20, self.state.cg_target + 1)

        # Always drive CG toward its target
        self.move_cg()

    def search_and_track(self, target):
        # ... your existing search/track code unchanged ...
        pass

    def ball_search_loop(self):
        return self.search_and_track(1)

    def goal_search_loop(self):
        return self.search_and_track(2)

    def set_cg_ten(self):
        logger.info("Reset CG to 10")
        self.state.cg_target = 10
        self.state.current_stop = 10

# instantiate for import in main.py
robot = Autonomy()
